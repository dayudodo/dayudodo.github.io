[{"title":"快速搭建自定义域名的rails5 https开发服务器","date":"2018-02-07T08:38:06.000Z","path":"2018/02/07/rails-and-https/","text":"https已经是大势所趋，越来越多的Web API调用依赖HTTPS环境，苹果公司也要求其ios App强制使用http\bs。本人想写点个微信小程序玩下，发现也得用https才好使:微信小程序服务器只支持https研究了一下如何在rails开发的时候开启https，最终发现使用nginx开启反向代理是最简单可行的办法，曾经试过用rails s -b ‘ssl://localhost:3000?key=path/to/file/localhost.key&amp;cert=path/to/file/localhost.crt’来开启https, 用倒是能用，就是后台错误一大堆。 本人开发环境 Rails 5.1.4 Mac OS X 10.12.5（El Capitan) OpenSSL 1.0.2l(brew install openssl) nginx 1.12.2 Google Chrome 64.0.3282.140 (64-bit) 生成根证书1openssl req -x509 -sha256 -nodes -newkey rsa:2048 -days 365 -keyout server.key -out server.crt 填写有关项，想省事儿的话只需要填写Common Name, 比如使用星号开头的*.blog.me。12345678910111213141516171819Generating a 2048 bit RSA private key..............+++.........................................................................................+++writing new private key to &apos;server.key&apos;-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &apos;.&apos;, the field will be left blank.-----Country Name (2 letter code) [AU]:State or Province Name (full name) [Some-State]:Locality Name (eg, city) []:Organization Name (eg, company) [Internet Widgits Pty Ltd]:Organizational Unit Name (eg, section) []:Common Name (e.g. server FQDN or YOUR name) []:*.blog.meEmail Address []:example@blog.me 会生成两个文件：证书文件server.crt和密钥文件server.key，下面的nginx中会用到 设置hosts添加自定义域名打开/etc/hosts文件，添加此句：1127.0.0.1 1.blog.me 建议使用\b免费的hosts管理工具：SwitchHosts: 点击下载 启动Rails开发服务器1rails server -b 0.0.0.0 -p 3000 设置nginx 安装nginx: 1brew install nginx 修改nginx配置，配置文件位于：/usr/local/etc/nginx/nginx.conf 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' # '$status $body_bytes_sent \"$http_referer\" ' # '\"$http_user_agent\" \"$http_x_forwarded_for\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 8080; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root html; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125; # HTTPS server server &#123; listen 4433; server_name 1.blog.me; ssl on; ssl_certificate server.crt; ssl_certificate_key server.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; proxy_pass http://127.0.0.1:3000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto https; &#125; &#125; include servers/*;&#125; 其中的HTTPS server就是相关的https配置，端口号设置为4433，因为默认的443是被mac系统屏蔽的。server_name就填咱们的自定义域名：1.blog.me。ssl_certificate对应的是证书文件，ssl_certificate_key则是你的密钥文件。在location中的proxy_pass设置的是反向代理地址，也就是本机的rails开发服务器地址，其它照搬即可。\b配置好后建议使用sudo nginx -t测试下避免有写错的\b情况。 使用brew services restart nginx来重启nginx！ 信任证书使用浏览器打开https://1.blog.me:4433 后会告诉你authority invalid此时\b打开developer tools点击View certificate拖动证书图标到桌面生成证书文件，并双击打开设置始终信任，输入超级用户密码后确认一切正常的话应该是这样： 小\b成功通过safari来访问是OK的 chrome会报错（老版本的chrome反倒不会）：可以点击高级中的\b继续前往来访问网站，只是左边会显示不安全： chrome出错是因为其已经不再支持证书中的commonName匹配，实际上，自2017年1月起需要subjectAltName这个规则了。 解决办法用根SSL证书来为本地自定义域名1.blog.me专门发行证书。创建1.blog.me.csr.cnf配置文件1234567891011121314[req]default_bits = 2048prompt = nodefault_md = sha256distinguished_name = dn[dn]C=USST=RandomStateL=RandomCityO=RandomOrganizationOU=RandomOrganizationUnitemailAddress=hello@example.comCN = 1.blog.me 用此配置1.blog.me.csr.cnf来创建证书密钥。该密钥存储在1.blog.me.key1openssl req -new -sha256 -nodes -out 1.blog.me.csr -newkey rsa:2048 -keyout 1.blog.me.key -config &lt;(cat 1.blog.me.csr.cnf) Generating a 2048 bit RSA private key……………………………………………..+++……………………………………………………………………………………….+++writing new private key to ‘1.blog.me.key’ 创建有subjectAltName的配置文件v3.ext1234567authorityKeyIdentifier=keyid,issuerbasicConstraints=CA:FALSEkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEnciphermentsubjectAltName = @alt_names[alt_names]DNS.1 = 1.blog.me 创建域名证书：1openssl x509 -req -in 1.blog.me.csr -CA server.crt -CAkey server.key -CAcreateserial -out 1.blog.me.crt -days 500 -sha256 -extfile v3.ext Signature oksubject=/C=US/ST=RandomState/L=RandomCity/O=RandomOrganization/OU=RandomOrganizationUnit/emailAddress=hello@example.com/CN=1.blog.meGetting CA Private Key 修改nginx.conf中的证书和密钥项：1234... ssl_certificate 1.blog.me.crt; ssl_certificate_key 1.blog.me.key;... 重启nginx: brew services restart nginxChrome中再次打开：https://1.blog.me:4433 PERFECT！ 优点 通过http://localhost:3000 也能访问本地开发服务器 puma在http模式下更少出错 测试方便 \b真实的产品服务器也可以这样开启https 开发服务器可以与产品服务器使用相同的域名（别忘了用SwitchHost切换），申请到的\bSSL证书也能用于开发(好处是不需要添加信任)","tags":[{"name":"rails","slug":"rails","permalink":"http://yoursite.com/tags/rails/"},{"name":"https","slug":"https","permalink":"http://yoursite.com/tags/https/"},{"name":"nginx","slug":"nginx","permalink":"http://yoursite.com/tags/nginx/"}]},{"title":"Docker修改image名称","date":"2017-05-08T01:57:43.000Z","path":"2017/05/08/dockerRename/","text":"想把下载的images中的nooulaif/rails名称改短一点儿，方法如下：1docker tag nooulaif/rails rails 改名之后会出现两个相同tag的images，比如下面的两个rails其实是相同的image123456$ docker images REPOSITORY TAG IMAGE ID CREATED SIZEnooulaif/rails latest c4fd8530888f 3 days ago 750 MBrails latest c4fd8530888f 3 days ago 750 MBnginx latest ba6bed934df2 7 months ago 181 MBtraining/webapp latest 6fae60ef3446 24 months ago 349 MB 可以直接删除原始的，这只会移除tag, 而真正的images还保留着123$ docker rmi nooulaif/rails Untagged: nooulaif/rails:latestUntagged: nooulaif/rails@sha256:b8bc29a5b72f020ad2f0be1b5fcc66071b778d453fcc1f60a3a1df8c73b22095 最后的结果：12345$ docker imagesREPOSITORY TAG IMAGE ID CREATED SIZErails latest c4fd8530888f 3 days ago 750 MBnginx latest ba6bed934df2 7 months ago 181 MBtraining/webapp latest 6fae60ef3446 24 months ago 349 MB","tags":[{"name":"docker","slug":"docker","permalink":"http://yoursite.com/tags/docker/"}]},{"title":"React Native的android真机调试","date":"2017-03-02T02:40:13.000Z","path":"2017/03/02/rn-android/","text":"RN（react native简写，下同）版本为0.42， android5、6真机都测试过，OK。 安装android sdk installer_r24.4.1-windows.exe Google Android SDK for Mac 24.4.1其它操作系统看这儿：(http://tools.android-studio.org/index.php/sdk)更简单的是直接安装android studio(https://developer.android.com/studio/index.html?hl=zh-cn)真机调试主要用到了sdk的platform-tools中的adb程序 开启USB调试首先要开启开发者选项，一般的手机默认是不开启的。打开选项→关于手机，点击软件信息中的版本号(Build number)七次，手机会有相关提示。回到设置中你会发现多了开发者选项，点开后进入，打开USB调试即可，有提示就点确定。 检验是否连接成功： 运行adb devices一般显示如下：1234$ adb devicesList of devices attachedemulator-5554 offline # Google emulator14ed2fcc device # Physical device 有device字样就说明已经OK了。注意：同一时间只能有一个连接设备，要么模拟器，要么真机。 运行应用1react-native run-android 无线调试一直连着usb挺麻烦的，RN提供了无线调试的方法：首先要确保两点： 手机和mac在同一局域网中 应用已经安装在手机上 通过系统偏好设置→网络先找到mac的ip地址：比如我的ip为192.168.1.218windows系统可以通过ipconfig来得到IP地址。 手机上打开你的应用，有可能会出现一个红色的错误，点击dismiss。 打开developer menu, 真机上一般通过按住返回键弹出。 打开Dev Settings → Debug server host for device. 输入ip地址和开发服务器的端口号（比如：192.168.1.218:8081） 返回到Developer Menu, 选择Reload JS 出错处理 硬件连接问题如果手机开启了调试，但是电脑没有显示，那有可能是USB线的问题，可能只是充电线！换一根正规的线再试。mac系统可以下载androidfiletransfer.dmg(Android File Transfer for Mac是Android官方提供的手机文件管理器，需要你的OS X版本至少在10.5，Android设备系统版本最低要在3.0。)- (https://dl.google.com/dl/androidjumper/mtp/current/androidfiletransfer.dmg)- (http://down.tech.sina.com.cn/content/60296.html)软件里面如果能够读取到手机数据，说明usb调试已经正确连接。或者重启adb: 12adb kill-serveradb start-server 确保能够在android模拟器里面运行，之后关闭模拟器 真机里面删除你的app 删除rn目录app中的build目录 再运行react-native run-android 尽量看官方的最新文档：官方真机调试","tags":[{"name":"react native","slug":"react-native","permalink":"http://yoursite.com/tags/react-native/"}]},{"title":"git设置代理","date":"2017-01-29T13:45:25.000Z","path":"2017/01/29/git-proxy/","text":"某些网络环境下，可能需要为git配置代理，一行命令解决问题：1git config --global https.proxy https://user:password@address:port 实例：1git config --global https.proxy https://admin:admin@192.168.1.10:3000","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"git中文乱码问题","date":"2017-01-26T15:42:12.000Z","path":"2017/01/26/git-messy-code/","text":"解决办法进入git安装目录，修改配置etc/gitconfig:123456[gui] encoding = utf-8[i18n] commitencoding = gbk[svn] pathnameencoding = gbk 第一行么自然是utf-8的格式支持，作用于gui界面 剩下的二行就打开了git环境的中文支持，最后一行设置了文件路径的中文支持。 正常显示中文文件名修改etc/git-completion.bash1alias ls=&apos;ls --show-control-chars --color=auto&apos; 在git bash中正常输入中文修改etc/inputrc1set output-meta on set convert-meta off git log中显示中文修改etc/profile1export LESSCHARSET=iso8859 #或者utf-8、gbk 说明：git log命令会停在第一页，按 space 键再往后翻页。这是通过将 log 送给 less 处理实现的。以上即是设置 less 的字符编码，使得git log 可以正常显示中文。其实，它的值不一定要设置为 utf-8，比如 latin1 也可以……。还有个办法是 $ git –no-pager log，在选项里禁止分页，则无需设置上面的选项。ps: 个人感觉还是用mac系统比较好，没有啥乱码的问题。","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"python2.7允许中文","date":"2017-01-24T15:38:36.000Z","path":"2017/01/24/python-chinese/","text":"想要在python2.7中使用中文，在文件头添加以下注释就OK1# -*- coding:utf-8 -*- 或者用这样的二种办法也可以12# coding=utf-8# coding: utf8","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"python爬虫设置头","date":"2017-01-23T15:24:06.000Z","path":"2017/01/23/python-header/","text":"用的是requests1234import requestsurl = &apos;http://www.baidu.com&apos;headers = &#123;&apos;Content-Type&apos;: &apos;application/json&apos;&#125;r = requests.get(url, headers=headers)","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Python pip使用国内源","date":"2017-01-14T12:01:34.000Z","path":"2017/01/14/python-index/","text":"通过pip install某个Python扩展库的时候，非常慢，有时候还安装不了，pip默认使用的是国外的源，换成国内源下载安装速度就会飙升啦！1vim ~/.pip/pip.conf 在里面填写如下内容：12[global]index-url = https://pypi.douban.com/simple 如果没有.pip目录就新建一个，感觉豆瓣的速度还是非常快的！下面是几个常用的国内源： https://pypi.douban.com/ 豆瓣 https://pypi.hustunique.com/ 华中理工大学 https://pypi.sdutlinux.org/ 山东理工大学 https://pypi.mirrors.ustc.edu.cn/ 中国科学技术大学","tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"git服务器实现无密码登录","date":"2017-01-12T07:47:07.000Z","path":"2017/01/12/git-no-password/","text":"装好git服务器之后，天天输入密码倒是安全，经常这样就太不程序员了。可以使用openssh实现无密码登录。 安装openssh1sudo apt-get install openssh-server 安装完成后确定其已经运行：1ps -e | grep sshd 正常的话应该有以下显示：127943 ? 00:00:00 sshd7977 ? 00:00:00 sshd 笔者曾经遇到过重启计算机也openssh也没有运行的情况，后来发现是/etc/ssh/sshd_config文件中有错误，导致无法启动，解决办法：先删除这个文件，再重新安装openssh123sudo rm /etc/ssh/sshd_configsudo apt-get remove openssh-serversudo apt-get install openssh-server 修改ssh配置在/etc/ssh/sshd_config中，找到里面有关AuthorizedKeysFile的一行，取消注释，请确定内容是这样的：123RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile %h/.ssh/authorized_keys 其中的%h表示当前用户的home目录。 生成私钥、公钥在客户端执行1ssh-keygen -t rsa 一路回车直到在~/.ssh目录中生成两个文件：id_rsa的私钥文件和id_rsa.pub的公钥文件。 复制公钥文件到服务器1scp ~/.ssh/id_rsa.pub git@192.168.1.xxx:home/git/.ssh/ 然后登录到服务器，并进入git账户所在ssh，生成authorized_keys文件12cd /home/git/.sshcat id_rsa.pub &gt; authorized_keys 修改权限12sudo chmod 700 ~/.sshsudo chmod 700 authorized_keys 重新启动sshd服务1sudo service ssh restart 重启成功会显示类似信息：12ssh stop/waitingssh start/running, process 3029 客户端无密码登录1ssh git@192.168.1.xxx 更方便的登录方式在~/.ssh目录中增加配置文件config, 内容如下：12345Host 服务器名称Hostname ip或者服务器域名User 用户名PubKeyAuthentication yesIdentityFile path/私钥文件名称 比如我的配置是这样：12345Host gHostname 192.168.1.100User gitPubKeyAuthentication yesIdentityFile ~/.ssh/id_rsa 如此，直接使用1ssh g 就能够登录到服务器了，另外，这种配置方法还可以无密码登录到不同的服务器！ Troubleshooting出现问题的时候可以按照下面的办法来一一排除 在ssh中使用-vvv选项 确实服务器上有你的pub文件，内容已经保存在authorized_keys中 确保客户端中有你的私钥文件，名称一般为id_rsa 确保.ssh属于git用户 1chown -R git:git .ssh 确保你的.ssh和authorized_keys文件有700权限(rwx——) 12chmod 700 .sshchmod 700 .ssh/authorized_keys 查看服务器日志，看具体问题在哪儿 1tail -f /var/log/auth.log 我遇到的问题 Permission denied (publickey).使用ssh -v选项时出现的 解决办法：在服务器日志文件auth.log中有这样一行Authentication refused: bad ownership or modes for file /home/git/.ssh/authorized_keys修改./ssh权限700及所属用户git后正常","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"创建自己的git server","date":"2017-01-10T06:49:55.000Z","path":"2017/01/10/git-server/","text":"腾讯上买了个小服务器，自然得把git弄理顺了，如果只是小小的代码同步需求，并且个人使用，那么git本身就提供了服务器版本 服务器操作安装git服务器操作系统为ubuntu14.0412sudo apt-get install gitsudo apt-get install openssh-server 新建一个用户git1sudo adduser git 输入密码，密码后面会用到。 新建一个空的仓库1sudo git init --bare blog.git 会有类似的提示：1Initialized empty Git repository in ~/blog.git/ 这样我们就创建了一个裸仓库，接下来我们把这个仓库的owner改为git1sudo chown -R git:git blog.git 加强安全性服务器最好禁止git使用shell登录，编辑/etc/passwd将1git:x:1000:1000:ange_git,,,:/home/git:/bin/bash 后的/bin/bash改为gitshell的路径就可以了，一般是/usr/bin/git-shell。即修改为：1git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 如此，服务器端就已经设置好了。 客户端操作客户端已经可以正常通过clone命令来克隆仓库了。1git clone git@192.168.1.xxx:~/blog.git 不过空仓库会告诉你啥也没有。123Cloning into &apos;blog&apos;...warning: You appear to have cloned an empty repository.done. 咱们在blog里面加点儿东西。12345cat newfilegit add .git commit -m &quot;just a new file&quot;git remote add origin git@192.168.1.xxx:~/blog.gitgit push -u origin master 因为是push到远程的，所以需要你输入密码，就是你在服务器新建用户时的密码。这样，最简易的git server就算是建立好了。","tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"hexo添加主题","date":"2017-01-10T05:27:18.000Z","path":"2017/01/10/add-themes/","text":"找了几个漂亮的hexo主题，各位麻虾（码侠）可以多试试，看哪个更适合你。 个人选择yilia原因：漂亮 其它hexo-theme-next, star: 6326内部又有三种风格可选： 默认Muse 想要更多themes?直接看官网的themes","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"hexo生成静态页面","date":"2017-01-10T04:55:05.000Z","path":"2017/01/10/three/","text":"1hexo generate 或者用简写:hexo g, 会在项目目录下生成一个public的静态目录，其中包含了所有的静态文件内容1234567891011121314151617181920212223242526272829303132333435363738➜ blog git:(master) ✗ hexo gINFO Start processingINFO Files loaded in 444 msINFO Generated: index.htmlINFO Generated: archives/index.htmlINFO Generated: fancybox/blank.gifINFO Generated: fancybox/jquery.fancybox.cssINFO Generated: fancybox/jquery.fancybox.jsINFO Generated: fancybox/fancybox_loading.gifINFO Generated: fancybox/jquery.fancybox.pack.jsINFO Generated: fancybox/fancybox_sprite.pngINFO Generated: fancybox/fancybox_loading@2x.gifINFO Generated: fancybox/fancybox_sprite@2x.pngINFO Generated: fancybox/fancybox_overlay.pngINFO Generated: tags/hexo/index.htmlINFO Generated: archives/2017/01/index.htmlINFO Generated: archives/2017/index.htmlINFO Generated: css/fonts/FontAwesome.otfINFO Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO Generated: css/style.cssINFO Generated: js/script.jsINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: fancybox/helpers/fancybox_buttons.pngINFO Generated: fancybox/helpers/jquery.fancybox-media.jsINFO Generated: css/images/banner.jpgINFO Generated: css/fonts/fontawesome-webfont.svgINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: 2017/01/07/second/index.htmlINFO Generated: 2017/01/10/three/index.htmlINFO Generated: 2017/01/07/second/hexo_first.jpgINFO Generated: 2017/01/07/second/hexo_main.jpgINFO Generated: 2017/01/09/change-jpg/index.htmlINFO Generated: 2017/01/07/hexo_issue/index.htmlINFO 34 files generated in 1.37 s OK，进入public目录，使用http-server（一个静态文件服务器，通过npm install -g http-server可以安装）来为生成的静态页面提供服务，如下：12345➜ public git:(master) ✗ http-serverStarting up http-server, serving ./Available on: http://127.0.0.1:8080 http://192.168.1.100:8080 如果是在开发阶段，建议使用hexo generate -f参数，这样每次都会强制重新生成所有的页面，避免出现一些奇怪的问题，更多的参数信息：12345678910➜ blog git:(master) ✗ hexo g --hUsage: hexo generateDescription:Generate static files.Options: -d, --deploy Deploy after generated -f, --force Force regenerate -w, --watch Watch file changes","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"MAC截图保存为jpg","date":"2017-01-09T08:57:22.000Z","path":"2017/01/09/change-jpg/","text":"mac自带的默认截图是保存成了PNG，占用空间过大，其实mac提供了修改默认保存文件的命令，打开终端，输入：1defaults write com.apple.screencapture type jpg 这样当你使用快捷键的时候保存的就是jpg格式了！ 截全屏幕：Cmd+Shift+3 截部分屏幕：Cmd+Shift+4，然后鼠标拖动截图区域 截指定窗口：Cmd+Shift+4，然后鼠标滑动到窗口上按空格键，然后按鼠标左键截图，如果按住ctrl截图，就只会保存到剪贴板中","tags":[{"name":"mac","slug":"mac","permalink":"http://yoursite.com/tags/mac/"}]},{"title":"hexo博客入门","date":"2017-01-07T15:23:52.000Z","path":"2017/01/07/second/","text":"安装1npm install hexo-cli 安装完成后运行hexo -v, 我的系统是Mac,显示如下：12345678910111213hexo -vhexo: 3.2.2hexo-cli: 1.0.2os: Darwin 15.4.0 darwin x64http_parser: 2.7.0node: 6.2.0v8: 5.0.71.47uv: 1.9.1zlib: 1.2.8ares: 1.10.1-DEVicu: 57.1modules: 48openssl: 1.0.2h 这样安装hexo就算成功了。如果没有成功，检查一下是否是权限问题，用sudo npm install hexo-cli再安装一次试试看。 新建项目1hexo init blog 命令完成后，会新建项目名称为blog, 并git克隆hexo-starter到blog目录下，自动运行npm install安装依赖包。12345678910111213141516➜ hexo init blogINFO Cloning hexo-starter to ~/test/blogCloning into &apos;~/blog&apos;...remote: Counting objects: 53, done.remote: Total 53 (delta 0), reused 0 (delta 0), pack-reused 53Unpacking objects: 100% (53/53), done.Checking connectivity... done.Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;Cloning into &apos;themes/landscape&apos;...remote: Counting objects: 756, done.remote: Total 756 (delta 0), reused 0 (delta 0), pack-reused 756Receiving objects: 100% (756/756), 2.53 MiB | 335.00 KiB/s, done.Resolving deltas: 100% (387/387), done.Checking connectivity... done.Submodule path &apos;themes/landscape&apos;: checked out &apos;decdc2d9956776cbe95420ae94bac87e22468d38&apos;... 生成的目录结构如下：12345678hexo/ |- node_modules/ # hexo依赖包 |- themes/ # 漂亮的主题包 |- sources/ # 博客md主文件 |- public/ # 生成的静态页面 |- package.json # node包依赖配置文件 |- _config.yml # hexo全局配置文件 |- .gitignore # git配置文件，包含了哪些需要忽略的 运行OK，这样就可以运行hexo了1hexo server 或者可以使用简写1hexo s 此时会显示：12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 在浏览器打开localhost:4000, 看看自己博客网站的效果吧，默认的生成界面就已经比较好看了： 新建一篇博客1hexo new 中文第一 可以直接使用中文名称哟！这样就会在source的_posts目录中新建一个名称为 中文第一.md 的文件：内容如下：12345---title: 中文第一date: 2017-01-09 11:00:41tags:--- title就是当页面打开时要显示的内容，date么就是你新建博客的时间，tags就是标签，可以写多个，以逗号分割即可。然后你就可以用markdown的格式来写自己的博客了，比如1234567891011---title: 中文第一date: 2017-01-09 11:00:41tags:---# hexohexo是什么？## hexo的安装- npm install hexo-cli 刷新浏览器，会看到这样的效果：","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"dtrace-provider安装出错","date":"2017-01-07T15:23:52.000Z","path":"2017/01/07/hexo_issue/","text":"有时候会遇到dtrace-provider的安装错误，一直停在node-gyp的位置上。解决办法： 下载并安装最新版本的xcode 使用brew uninstall node卸载node brew install node重新安装node 使用npm install hexo-cli正常安装","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]